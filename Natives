POOL -
int GET_MAX_PEDS()
int GET_MAX_VEHICLES()
int GET_MAX_OBJECTS()
int GET_PED_COUNT()
int GET_VEHICLE_COUNT()
int GET_OBJECT_COUNT()
Ped GET_PED_AT_INDEX(int index)
Vehicle GET_VEHICLE_AT_INDEX(int index)
Object GET_OBJECT_AT_INDEX(int index)

PLAYER-
Ped GET_PLAYER_PED(Player player)
Ped GET_PLAYER_PED_SCRIPT_INDEX(Player player)
Ped PLAYER_PED_ID()
Player PLAYER_ID()
void SET_PLAYER_WANTED_LEVEL(Player player, int wantedLevel, bool disableNoMission)
void SET_PLAYER_WANTED_LEVEL_NOW(Player player, bool p1)
void SET_PLAYER_MODEL(Player player, Hash model)
int GET_PLAYER_GROUP(Player player)
bool IS_PLAYER_PLAYING(Player player)
bool IS_PLAYER_FREE_AIMING(Player player)
string GET_PLAYER_NAME(Player player)
bool IS_PLAYER_PRESSING_HORN(Player player)
int GET_PLAYER_WANTED_LEVEL(Player player)
bool GET_PLAYER_INVINCIBLE(Player player)
void SET_PLAYER_VISIBLE_LOCALLY(Player player, bool toggle)
void SET_LOCAL_PLAYER_VISIBLE_LOCALLY(bool p0)
int PLAYER_COUNT()
bool IS_PLAYER_FEMALE(Player player)
bool IS_PLAYER_FRIEND(Player player)
Entity GET_ENTITY_PLAYER_IS_FREE_AIMING_AT(Player player)
int GET_PLAYER_SCID(Player player)
int GET_PLAYER_IP(Player player)
bool IS_PLAYER_IN_ANY_VEHICLE(Player player)
vec3 GET_PLAYER_COORDS(Player player)
float GET_PLAYER_HEADING(Player player)
float GET_PLAYER_HEALTH(Player player)
float GET_PLAYER_MAX_HEALTH(Player player)
float GET_PLAYER_ARMOR(Player player)
int GET_PLAYER_FROM_PED(Ped ped)
int GET_PLAYER_TEAM(Player player)
Vehicle GET_PLAYER_VEHICLE(Player player)
bool IS_PLAYER_HOST(Player player)
Player GET_HOST()
bool IS_PLAYER_SCRIPT_HOST(Player player)
Player GET_SCRIPT_HOST()
Hash GET_PLAYER_MODEL(Player player)
bool IS_PLAYER_VALID(Player player)
int GET_PLAYER_HOST_TOKEN(Player player)
int GET_PLAYER_HOST_PRIORITY(Player player)
void SET_PLAYER_TARGETING_MODE(int mode)
void SPECIAL_ABILITY_FILL_METER(Player player, bool p1)
string IS_PLAYER_MODDER(Player player)
bool DID_PLAYER_TRIGGER_RAC(Player player, int flag)

SYSTEM -
void WAIT(int ms)
void WAIT()
void YIELD(int ms)
void YIELD()

CAM -
vec3 GET_GAMEPLAY_CAM_COORD()
vec3 GET_GAMEPLAY_CAM_ROT(int rotationOrder)
float GET_GAMEPLAY_CAM_RELATIVE_HEADING()
float GET_GAMEPLAY_CAM_RELATIVE_PITCH()
Cam CREATE_CAM(string camName, bool p1)
bool DOES_CAM_EXIST(Cam cam)
void SET_CAM_ACTIVE(Cam cam, bool active)
bool IS_CAM_ACTIVE(Cam cam)
void SET_CAM_FOV(Cam cam, float fieldOfView)
void SET_CAM_ROT(Cam cam, float rotX, float rotY, float rotZ, int rotationOrder)
void SET_CAM_COORD(Cam cam, float posX, float posY, float posZ)
void RENDER_SCRIPT_CAMS(bool render, bool ease, int easeTime, bool p3, bool p4, Any p5)
void DESTROY_CAM(Cam cam, bool netMissionEntity)
void SHAKE_CAM(Cam cam, string type, float amplitude)
vec3 GET_FINAL_RENDERED_CAM_ROT(int rotationOrder)
vec3 GET_FINAL_RENDERED_CAM_COORD()
void SET_CAM_PARAMS(Cam cam, float posX, float posY, float posZ, float rotX, float rotY, float rotZ, float fieldOfView, Any p8, int p9, int p10, int p11)
void STOP_CAM_SHAKING(Cam cam, bool p1)
void ATTACH_CAM_TO_ENTITY(Cam cam, Entity entity, float xOffset, float yOffset, float zOffset, bool isRelative)

DECORATOR -
bool DECOR_SET_TIME(Entity entity, string propertyName, int timestamp)
bool DECOR_SET_BOOL(Entity entity, string propertyName, bool value)
bool DECOR_SET_FLOAT(Entity entity, string propertyName, float value)
bool DECOR_SET_INT(Entity entity, string propertyName, int value)
bool DECOR_GET_BOOL(Entity entity, string propertyName)
float DECOR_GET_FLOAT(Entity entity, string propertyName)
int DECOR_GET_INT(Entity entity, string propertyName)
bool DECOR_EXIST_ON(Entity entity, string propertyName)
bool DECOR_REMOVE(Entity entity, string propertyName)
void DECOR_REGISTER(string propertyName, int type)

WORLDPROBE -
int START_SHAPE_TEST(float fromX, float fromY, float fromZ, float toX, float toY, float toZ, Entity ignore)
Entity GET_HIT_ENTITY(int handle)
vec3 GET_HIT_COORDS(int handle)
bool DID_HIT_ANYTHING(int handle)

STATS -
bool STAT_SET_INT(Hash statName, int value, bool save)
bool STAT_SET_FLOAT(Hash statName, float value, bool save)
bool STAT_SET_BOOL(Hash statName, bool value, bool save)
int STAT_GET_INT(Hash stat)
float STAT_GET_FLOAT(Hash stat)
bool STAT_GET_BOOL(Hash stat)
Hash GET_NGSTAT_BOOL_HASH(int index, bool spStat, bool charStat, int character, string section)
Hash GET_NGSTAT_INT_HASH(int index, bool spStat, bool charStat, int character, string section)
int STAT_GET_PACKED_BOOL_MASK(int p0)
int STAT_GET_PACKED_INT_MASK(int p0)
bool STAT_SET_BOOL_MASKED(Hash statName, bool value, int mask, bool save)
bool STAT_SET_INT_MASKED(Hash statName, Any p1, Any p2, int p3, bool save)
bool STAT_SAVE(int p0, bool p1, int p2)

CLOCK -
void SET_CLOCK_TIME(int hour, int minute, int second)
void PAUSE_CLOCK(bool toggle)
int GET_CLOCK_HOURS()
int GET_CLOCK_MINUTES()
int GET_CLOCK_SECONDS()

FIRE -
FireId START_ENTITY_FIRE(Entity entity)
void STOP_ENTITY_FIRE(Entity entity)
bool IS_ENTITY_ON_FIRE(Entity entity)
void ADD_EXPLOSION(float x, float y, float z, int explosionType, float damageScale, bool isAudible, bool isInvisible, float cameraShake, bool noDamage)
void ADD_OWNED_EXPLOSION(Ped owner, float x, float y, float z, int explosionType, float damageScale, bool isAudible, bool isInvisible, float cameraShake)

STREAMING -
int GET_MODEL_INFO(Hash model)
void REQUEST_MODEL(Hash model)
bool HAS_MODEL_LOADED(Hash model)
void SET_MODEL_AS_NO_LONGER_NEEDED(Hash model)
bool IS_MODEL_IN_CDIMAGE(Hash model)
bool IS_MODEL_VALID(Hash model)
bool IS_MODEL_A_PED(Hash model)
bool IS_MODEL_A_VEHICLE(Hash model)
bool DOES_ANIM_DICT_EXIST(string animDict)
void REQUEST_ANIM_DICT(string animDict)
bool HAS_ANIM_DICT_LOADED(string animDict)
void REMOVE_ANIM_DICT(string animDict)
void REQUEST_ANIM_SET(string animSet)
bool HAS_ANIM_SET_LOADED(string animSet)
void REMOVE_ANIM_SET(string animSet)
void REQUEST_IPL(string iplName)
void REMOVE_IPL(string iplName)
bool IS_IPL_ACTIVE(string iplName)
bool IS_MODEL_A_BOAT(Hash model)
bool IS_MODEL_A_JETSKI(Hash model)
bool IS_MODEL_A_PLANE(Hash model)
bool IS_MODEL_A_HELI(Hash model)
bool IS_MODEL_A_CAR(Hash model)
bool IS_MODEL_A_TRAIN(Hash model)
bool IS_MODEL_A_BIKE(Hash model)
bool IS_MODEL_A_BICYCLE(Hash model)
bool IS_MODEL_A_QUAD(Hash model)

CUTSCENE -
bool IS_CUTSCENE_ACTIVE()
bool IS_CUTSCENE_PLAYING()
bool HAS_CUTSCENE_LOADED()
void STOP_CUTSCENE_IMMEDIATELY()

WATER -
void MODIFY_WATER(float x, float y, float radius, float height)
void SET_WAVES_INTENSITY(float intensity)
float GET_WAVES_INTENSITY()
void RESET_WAVES_INTENSITY()

AUDIO -
void PLAY_SOUND(int soundId, string audioName, string audioRef, bool p3, Any p4, bool p5)
void PLAY_SOUND_FRONTEND(int soundId, string audioName, string audioRef, bool p3)
void PLAY_SOUND_FROM_ENTITY(int soundId, string audioName, Entity entity, string audioRef, bool isNetwork, Any p5)
void PLAY_SOUND_FROM_COORD(int soundId, string audioName, float x, float y, float z, string audioRef, bool isNetwork, int range, bool p8)
void STOP_SOUND(int soundId)
void PLAY_PAIN(Ped ped, int painID, int p1, Any p3)
void SET_PED_IS_DRUNK(Ped ped, bool toggle)
string GET_PLAYER_RADIO_STATION_NAME()
string GET_RADIO_STATION_NAME(int radioStation)
void FREEZE_RADIO_STATION(string radioStation)
void UNFREEZE_RADIO_STATION(string radioStation)
void SKIP_RADIO_FORWARD()
void SET_RADIO_TRACK(string radioStation, string radioTrack)
void SET_RADIO_STATION_IS_VISIBLE(string radioStation, bool toggle)

INTERIOR -
Interior GET_INTERIOR_AT_COORDS_WITH_TYPE(float x, float y, float z, string interiorType)
void ACTIVATE_INTERIOR_PROP(Interior interior, string entitySetName)
void DEACTIVATE_INTERIOR_PROP(Interior interior, string entitySetName)
bool IS_INTERIOR_PROP_ACTIVE(Interior interior, string entitySetName)
Interior GET_INTERIOR_FROM_ENTITY(Entity entity)
void REFRESH_INTERIOR(Interior interior)

TASK -
void TASK_COMBAT_PED(Ped ped, Ped targetPed, int p2, int p3)
void TASK_WANDER_STANDARD(Ped ped, float p1, int p2)
void TASK_VEHICLE_DRIVE_WANDER(Ped ped, Vehicle vehicle, float speed, int drivingStyle)
void TASK_START_SCENARIO_IN_PLACE(Ped ped, string scenarioName, int unkDelay, bool playEnterAnim)
void TASK_START_SCENARIO_AT_POSITION(Ped ped, string scenarioName, float x, float y, float z, float heading, int duration, bool sittingScenario, bool teleport)
void TASK_STAND_GUARD(Ped ped, float x, float y, float z, float heading, string scenarioName)
void PLAY_ANIM_ON_RUNNING_SCENARIO(Ped ped, string animDict, string animName)
bool DOES_SCENARIO_GROUP_EXIST(string scenarioGroup)
bool IS_SCENARIO_GROUP_ENABLED(string scenarioGroup)
void SET_SCENARIO_GROUP_ENABLED(string scenarioGroup, bool p1)
void RESET_SCENARIO_GROUPS_ENABLED()
void SET_EXCLUSIVE_SCENARIO_GROUP(string scenarioGroup)
void RESET_EXCLUSIVE_SCENARIO_GROUP()
bool IS_SCENARIO_TYPE_ENABLED(string scenarioType)
void SET_SCENARIO_TYPE_ENABLED(string scenarioType, bool toggle)
void RESET_SCENARIO_TYPES_ENABLED()
bool IS_PED_ACTIVE_IN_SCENARIO(Ped ped)
void TASK_FOLLOW_TO_OFFSET_OF_ENTITY(Ped ped, Entity entity, float offsetX, float offsetY, float offsetZ, float movementSpeed, int timeout, float stoppingRange, bool persistFollowing)
void TASK_GO_STRAIGHT_TO_COORD(Ped ped, float x, float y, float z, float speed, int timeout, float targetHeading, float distanceToSlide)
void TASK_VEHICLE_DRIVE_TO_COORD_LONGRANGE(Ped ped, Vehicle vehicle, float x, float y, float z, float speed, int driveMode, float stopRange)
void TASK_SHOOT_AT_ENTITY(Entity entity, Entity target, int duration, Hash firingPattern)
void TASK_VEHICLE_ESCORT(Ped ped, Vehicle vehicle, Vehicle targetVehicle, int mode, float speed, int drivingStyle, float minDistance, int p7, float noRoadsDistance)
void TASK_VEHICLE_FOLLOW(Ped driver, Vehicle vehicle, Entity targetEntity, float speed, int drivingStyle, int minDistance)
void TASK_VEHICLE_DRIVE_TO_COORD(Ped ped, Vehicle vehicle, float x, float y, float z, float speed, Any p6, Hash vehicleModel, int drivingMode, float stopRange, float p10)
void TASK_VEHICLE_SHOOT_AT_PED(Ped ped, Ped target, float p2)
void TASK_VEHICLE_AIM_AT_PED(Ped ped, Ped target)
void TASK_VEHICLE_SHOOT_AT_COORD(Ped ped, float x, float y, float z, float p4)
void TASK_VEHICLE_AIM_AT_COORD(Ped ped, float x, float y, float z)
void TASK_STAY_IN_COVER(Ped ped)
void TASK_GO_TO_COORD_WHILE_AIMING_AT_COORD(Ped ped, float x, float y, float z, float aimAtX, float aimAtY, float aimAtZ, float moveSpeed, bool p8, float p9, float p10, bool p11, Any flags, bool p13, Hash firingPattern)
void TASK_GO_TO_COORD_WHILE_AIMING_AT_ENTITY(Any p0, float p1, float p2, float p3, Any p4, float p5, bool p6, float p7, float p8, bool p9, Any p10, bool p11, Any p12, Any p13)
void TASK_GO_TO_ENTITY_WHILE_AIMING_AT_COORD(Any p0, Any p1, float p2, float p3, float p4, float p5, bool p6, float p7, float p8, bool p9, bool p10, Any p11)
void TASK_GO_TO_ENTITY_WHILE_AIMING_AT_ENTITY(Ped ped, Entity entityToWalkTo, Entity entityToAimAt, float speed, bool shootatEntity, float p5, float p6, bool p7, bool p8, Hash firingPattern)
void TASK_OPEN_VEHICLE_DOOR(Ped ped, Vehicle vehicle, int timeOut, int seat, float speed)
void TASK_ENTER_VEHICLE(Ped ped, Vehicle vehicle, int timeout, int seat, float speed, int flag, Any p6)
void TASK_LEAVE_VEHICLE(Ped ped, Vehicle vehicle, int flags)
void TASK_SKY_DIVE(Ped ped, bool p1)
void TASK_PARACHUTE(Ped ped, bool p1, bool p2)
void TASK_PARACHUTE_TO_TARGET(Ped ped, float x, float y, float z)
void SET_PARACHUTE_TASK_TARGET(Ped ped, float x, float y, float z)
void SET_PARACHUTE_TASK_THRUST(Ped ped, float thrust)
void TASK_RAPPEL_FROM_HELI(Ped ped, float p1)
void TASK_VEHICLE_CHASE(Ped driver, Entity targetEnt)
void SET_TASK_VEHICLE_CHASE_BEHAVIOR_FLAG(Ped ped, int flag, bool set)
void SET_TASK_VEHICLE_CHASE_IDEAL_PURSUIT_DISTANCE(Ped ped, float distance)
void TASK_SHOOT_AT_COORD(Ped ped, float x, float y, float z, int duration, Hash firingPattern)
void TASK_AIM_GUN_AT_COORD(Ped ped, float x, float y, float z, int time, bool p5, bool p6)
void TASK_AIM_GUN_AT_ENTITY(Ped ped, Entity entity, int duration, bool p3)
void TASK_TURN_PED_TO_FACE_ENTITY(Ped ped, Entity entity, int duration)
bool IS_TASK_ACTIVE(Ped ped, int taskIndex)
void TASK_PLAY_ANIM(Ped ped, string animDictionary, string animationName, float blendInSpeed, float blendOutSpeed, int duration, int flag, float playbackRate, bool lockX, bool lockY, bool lockZ)
void STOP_ANIM_TASK(Ped ped, string animDictionary, string animationName, float p3)
void TASK_PLANE_MISSION(Ped pilot, Vehicle aircraft, Vehicle targetVehicle, Ped targetPed, float destinationX, float destinationY, float destinationZ, int missionFlag, float angularDrag, float unk, float targetHeading, float maxZ, float minZ, Any p13)
void TASK_VEHICLE_MISSION_PED_TARGET(Ped ped, Vehicle vehicle, Ped pedTarget, int missionType, float maxSpeed, int drivingStyle, float minDistance, float p7, bool DriveAgainstTraffic)

CONTROL - 
bool IS_CONTROL_ENABLED(int padIndex, int control)
bool IS_CONTROL_PRESSED(int padIndex, int control)
bool IS_CONTROL_RELEASED(int padIndex, int control)
bool IS_CONTROL_JUST_PRESSED(int padIndex, int control)
bool IS_CONTROL_JUST_RELEASED(int padIndex, int control)
float GET_CONTROL_NORMAL(int padIndex, int control)
bool IS_DISABLED_CONTROL_PRESSED(int padIndex, int control)
bool IS_DISABLED_CONTROL_RELEASED(int padIndex, int control)
bool IS_DISABLED_CONTROL_JUST_PRESSED(int padIndex, int control)
bool IS_DISABLED_CONTROL_JUST_RELEASED(int padIndex, int control)
void DISABLE_CONTROL_ACTION(int padIndex, int control, bool disable)
void ENABLE_CONTROL_ACTION(int padIndex, int control, bool enable)
void DISABLE_ALL_CONTROL_ACTIONS(int padIndex)
void ENABLE_ALL_CONTROL_ACTIONS(int padIndex)
bool SET_CONTROL_NORMAL(int padIndex, int control, float amount)

NETWORK -
void SET_ENTITY_EXISTS_ON_ALL_MACHINES(Entity entity, bool toggle)
int GET_NET_OBJECT_ID(Entity entity)
bool NETSHOP_TRANSFER_BANK_TO_WALLET(int charSlot, int amount)
bool NETSHOP_TRANSFER_WALLET_TO_BANK(int charSlot, int amount)
bool NETSHOP_TRANSFER_CASH_SET_TELEMETRY_NONCE_SEED()
bool NETSHOP_CHECKOUT_START(int transactionId)
int NETSHOP_BEGIN_SERVICE(Hash categoryHash, Hash itemHash, Hash actionTypeHash, int value, int flags)
string SC_GET_NICKNAME()
void NETWORK_SUPPRESS_INVITE(bool toggle)
void NETWORK_BLOCK_INVITES(bool toggle)
bool NETWORK_GET_THIS_SCRIPT_IS_NETWORK_SCRIPT()
string NETWORK_PLAYER_GET_NAME(Player player)
bool NETWORK_PLAYER_IS_ROCKSTAR_DEV(Player player)
bool NETWORK_PLAYER_INDEX_IS_CHEATER(Player player)
void NETWORK_FADE_IN_ENTITY(Entity entity, bool state, Any p2)
void NETWORK_FADE_OUT_ENTITY(Entity entity, bool normal, bool slow)
string GET_ONLINE_VERSION()
bool NETWORK_IS_HOST()
void NETWORK_SESSION_KICK_PLAYER(Player player)
bool TRIGGER_SCRIPT_CRC_CHECK_ON_PLAYER(Player player, int p1, Hash scriptHash)
void SET_THIS_SCRIPT_IS_NETWORK_SCRIPT(int maxNumMissionParticipants, bool p1, int instanceId)
bool REQUEST_CONTROL_OF_ENTITY(Entity entity)
bool HAS_CONTROL_OF_ENTITY(Entity entity)
bool IS_SESSION_STARTED()
Hash NETWORK_HASH_FROM_PLAYER(Player player)
int NETWORK_GET_MAX_FRIENDS()
int NETWORK_GET_FRIEND_COUNT()
bool NETWORK_IS_FRIEND_ONLINE(string name)
bool NETWORK_IS_FRIEND_IN_MULTIPLAYER(string friendName)
string NETWORK_GET_FRIEND_NAME(int friendIndex)
bool NETWORK_IS_FRIEND_INDEX_ONLINE(int friendIndex)
void NETWORK_SET_PLAYER_IS_PASSIVE(bool toggle)
int GET_FRIEND_SCID(string name)
bool IS_SCID_FRIEND(int scid)
void SEND_CHAT_MESSAGE(string message, bool team)
void SEND_CHAT_MESSAGE_AS(Player player, string message, bool team)
bool IS_MULTIPLAYER_CHAT_ACTIVE()
void CLOSE_MULTIPLAYER_CHAT()
void NETWORK_SET_IN_SPECTATOR_MODE(bool toggle, Ped playerPed)
bool NETWORK_IS_PLAYER_CONNECTED(Player player)
void MIGRATE_SCRIPT_HOST()
void MIGRATE_SCRIPT_HOST(string script)
int NETWORK_GET_NETWORK_ID_FROM_ENTITY(Entity entity)
void SET_NETWORK_ID_CAN_MIGRATE(int netId, bool toggle)

OBJECT -
Hash GET_PICKUP_HASH_FROM_WEAPON(Hash weaponHash)
Hash GET_WEAPON_TYPE_FROM_PICKUP_TYPE(Hash pickupHash)
Object GET_CLOSEST_OBJECT_OF_TYPE(float x, float y, float z, float radius, Hash modelHash, bool isMission, bool p6, bool p7)
Object CREATE_OBJECT(Hash modelHash, float x, float y, float z, bool isNetwork, bool bScriptHostObj, bool dynamic)
OBJECT.CREATE_WORLD_OBJECT(Hash modelHash, float x, float y, float z, bool isNetwork, bool dynamic)
Pickup CREATE_AMBIENT_PICKUP(Hash pickupHash, float posX, float posY, float posZ, int flags, int value, Hash modelHash, bool p7, bool p8)

ENTITY -
bool DOES_ENTITY_EXIST(Entity entity)
vec3 GET_ENTITY_COORDS(Entity entity)
void SET_ENTITY_COORDS_NO_OFFSET(Entity entity, float xPos, float yPos, float zPos)
vec3 GET_ENTITY_ROTATION(Entity entity, int rotationOrder)
void SET_ENTITY_ROTATION(Entity entity, float pitch, float roll, float yaw, int rotationOrder, bool p5)
void SET_ENTITY_HEADING(Entity entity, float heading)
void SET_ENTITY_VELOCITY(Entity entity, float x, float y, float z)
vec3 GET_ENTITY_VELOCITY(Entity entity)
bool IS_AN_ENTITY(int handle)
bool IS_ENTITY_A_PED(Entity entity)
bool IS_ENTITY_A_MISSION_ENTITY(Entity entity)
bool IS_ENTITY_A_VEHICLE(Entity entity)
bool IS_ENTITY_AN_OBJECT(Entity entity)
bool IS_ENTITY_DEAD(Entity entity)
bool IS_ENTITY_ON_FIRE(Entity entity)
bool IS_ENTITY_VISIBLE(Entity entity)
bool IS_ENTITY_ATTACHED(Entity entity)
void SET_ENTITY_VISIBLE(Entity entity, bool toggle, bool unk)
int GET_ENTITY_TYPE(Entity entity)
void SET_ENTITY_GRAVITY(Entity entity, bool toggle)
void APPLY_FORCE_TO_ENTITY(Entity entity, int forceFlags, float x, float y, float z, float offX, float offY, float offZ, int boneIndex, bool isDirectionRel, bool ignoreUpVec, bool isForceRel, bool p12, bool p13)
Entity GET_ENTITY_ATTACHED_TO(Entity entity)
void DELETE_ENTITY(Entity entity)
void DETACH_ENTITY(Entity entity, bool dynamic, bool collision)
Hash GET_ENTITY_MODEL(Entity entity)
float GET_ENTITY_HEADING(Entity entity)
void ATTACH_ENTITY_TO_ENTITY(Entity entity1, Entity entity2, int boneIndex, float xPos, float yPos, float zPos, float xRot, float yRot, float zRot, bool p9, bool useSoftPinning, bool collision, bool isPed, int vertexIndex, bool fixedRot)
void SET_ENTITY_AS_MISSION_ENTITY(Entity entity, bool p1, bool p2)
void SET_ENTITY_COLLISION(Entity entity, bool toggle, bool keepPhysics)
bool IS_ENTITY_IN_AIR(Entity entity)
void SET_ENTITY_AS_NO_LONGER_NEEDED(Entity entity)
void FREEZE_ENTITY(Entity entity, bool toggle)
vec3 GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(Entity entity, float offsetX, float offsetY, float offsetZ)
void SET_ENTITY_ALPHA(Entity entity, int alphaLevel, bool skin)
void RESET_ENTITY_ALPHA(Entity entity)
void SET_ENTITY_INVINCIBLE(Entity entity, bool toggle)
bool IS_ENTITY_IN_WATER(Entity entity)
float GET_ENTITY_SPEED(Entity entity)
void SET_ENTITY_LIGHTS(Entity entity, bool toggle)
void SET_ENTITY_MAX_SPEED(Entity entity, float speed)
float GET_ENTITY_PITCH(Entity entity)
float GET_ENTITY_ROLL(Entity entity)
float GET_ENTITY_PHYSICS_HEADING(Entity entity)
bool DOES_ENTITY_HAVE_PHYSICS(Entity entity)
vec3 GET_ENTITY_ROTATION_VELOCITY(Entity entity)
float GET_ENTITY_SUBMERGED_LEVEL(Entity entity)
int GET_ENTITY_POPULATION_TYPE(Entity entity)
bool IS_ENTITY_STATIC(Entity entity)
bool IS_ENTITY_IN_ZONE(Entity entity, string zone)
bool IS_ENTITY_UPRIGHT(Entity entity, float angle)
bool IS_ENTITY_UPSIDE_DOWN(Entity entity)
bool HAS_ENTITY_BEEN_DAMAGED_BY_ANY_OBJECT(Entity entity)
bool HAS_ENTITY_BEEN_DAMAGED_BY_ANY_PED(Entity entity)
bool HAS_ENTITY_BEEN_DAMAGED_BY_ANY_VEHICLE(Entity entity)
bool HAS_ENTITY_BEEN_DAMAGED_BY_ENTITY(Entity entity1, Entity entity2, bool p2)
bool DOES_ENTITY_HAVE_DRAWABLE(Entity entity)
bool HAS_ENTITY_COLLIDED_WITH_ANYTHING(Entity entity)
int GET_ENTITY_BONE_INDEX_BY_NAME(Entity entity, string boneName)
void APPLY_FORCE_TO_ENTITY_CENTER_OF_MASS(Entity entity, int forceType, float x, float y, float z, bool p5, bool isDirectionRel, bool isForceRel, bool p8)
int GET_ENTITY_MAX_HEALTH(Entity entity)
void SET_ENTITY_MAX_HEALTH(Entity entity, int value)
vec3 GET_ENTITY_FORWARD_VECTOR(Entity entity)
bool IS_ENTITY_ON_SCREEN(Entity entity)
void SET_ENTITY_ANIM_CURRENT_TIME(Entity entity, string animDictionary, string animName, float time)
void SET_ENTITY_ANIM_SPEED(Entity entity, string animDictionary, string animName, float speedMultiplier)
void SET_ENTITY_HEALTH(Entity entity, int health, int p2)
void SET_ENTITY_PROOFS(Entity entity, bool bulletProof, bool fireProof, bool explosionProof, bool collisionProof, bool meleeProof, bool p6, bool p7, bool drownProof)
int GET_ENTITY_ALPHA(Entity entity)
void CREATE_MODEL_SWAP(float x, float y, float z, float radius, Hash originalModel, Hash newModel, bool p6)
void REMOVE_MODEL_SWAP(float x, float y, float z, float radius, Hash originalModel, Hash newModel, bool p6)

VEHICLE -
void SET_VEHICLE_TYRE_SMOKE_COLOR(Vehicle vehicle, int r, int g, int b)
Ped GET_PED_IN_VEHICLE_SEAT(Vehicle vehicle, int seatIndex, bool p2)
void SET_VEHICLE_IS_STOLEN(Vehicle vehicle, bool isStolen)
string GET_MOD_TEXT_LABEL(Vehicle vehicle, int modType, int modValue)
string GET_MOD_SLOT_NAME(Vehicle vehicle, int modType)
string GET_LIVERY_NAME(Vehicle vehicle, int liveryIndex)
int GET_NUM_VEHICLE_MODS(Vehicle vehicle, int modType)
void SET_VEHICLE_MOD(Vehicle vehicle, int modType, int modIndex, bool customTires)
int GET_VEHICLE_MOD(Vehicle vehicle, int modType)
void SET_VEHICLE_MOD_KIT(Vehicle vehicle, int modKit)
void SET_VEHICLE_EXTRA(Vehicle vehicle, int extraId, bool disable)
bool DOES_EXTRA_EXIST(Vehicle vehicle, int extraId)
bool IS_VEHICLE_EXTRA_TURNED_ON(Vehicle vehicle, int extraId)
void TOGGLE_VEHICLE_MOD(Vehicle vehicle, int modType, bool toggle)
bool IS_VEHICLE_A_CONVERTIBLE(Vehicle vehicle, bool p1)
int GET_CONVERTIBLE_ROOF_STATE(Vehicle vehicle)
void SET_CONVERTIBLE_ROOF(Vehicle vehicle, bool p1)
void SET_VEHICLE_INDICATOR_LIGHTS(Vehicle vehicle, int turnSignal, bool toggle)
void SET_VEHICLE_BRAKE_LIGHTS(Vehicle vehicle, bool toggle)
void SET_VEHICLE_CAN_BE_VISIBLY_DAMAGED(Vehicle vehicle, bool state)
void SET_VEHICLE_ENGINE_ON(Vehicle vehicle, bool value, bool instantly, bool disableAutoStart)
void SET_VEHICLE_FIXED(Vehicle vehicle)
void SET_VEHICLE_DEFORMATION_FIXED(Vehicle vehicle)
void SET_VEHICLE_UNDRIVEABLE(Vehicle vehicle, bool toggle)
bool SET_VEHICLE_ON_GROUND_PROPERLY(Vehicle vehicle, float p1)
void SET_VEHICLE_FORWARD_SPEED(Vehicle vehicle, float speed)
void SET_VEHICLE_NUMBER_PLATE_TEXT(Vehicle vehicle, string plateText)
void SET_VEHICLE_DOOR_OPEN(Vehicle vehicle, int doorId, bool loose, bool openInstantly)
void SET_VEHICLE_DOORS_SHUT(Vehicle vehicle, bool closeInstantly)
bool IS_TOGGLE_MOD_ON(Vehicle vehicle, int modType)
void SET_VEHICLE_WHEEL_TYPE(Vehicle vehicle, int WheelType)
void SET_VEHICLE_NUMBER_PLATE_INDEX(Vehicle vehicle, int plateIndex)
void SET_VEHICLE_TYRES_CAN_BURST(Vehicle vehicle, bool toggle)
void SET_VEHICLE_TYRE_BURST(Vehicle vehicle, int index, bool onRim, float p3)
int GET_NUM_VEHICLE_MODS(Vehicle vehicle, int modType)
bool IS_VEHICLE_ENGINE_RUNNING(Vehicle vehicle)
void SET_VEHICLE_ENGINE_HEALTH(Vehicle vehicle, float health)
bool IS_VEHICLE_DAMAGED(Vehicle vehicle)
bool IS_VEHICLE_ON_ALL_WHEELS(Vehicle vehicle)
Vehicle CREATE_VEHICLE(Hash modelHash, float x, float y, float z, float heading, bool isNetwork, bool bScriptHostVeh, bool p7)
void SET_VEHICLE_DOORS_LOCKED(Vehicle vehicle, int doorLockStatus)
void SET_VEHICLE_NEON_LIGHT_ENABLED(Vehicle vehicle, int index, bool toggle)
bool IS_VEHICLE_NEON_LIGHT_ENABLED(Vehicle vehicle, int index)
void SET_VEHICLE_DENSITY_MULTIPLIER_THIS_FRAME(float multiplier)
void SET_RANDOM_VEHICLE_DENSITY_MULTIPLIER_THIS_FRAME(float multiplier)
void SET_PARKED_VEHICLE_DENSITY_MULTIPLIER_THIS_FRAME(float multiplier)
void SET_AMBIENT_VEHICLE_RANGE_MULTIPLIER_THIS_FRAME(float value)
bool IS_VEHICLE_ROCKET_BOOST_ACTIVE(Vehicle vehicle)
void SET_VEHICLE_ROCKET_BOOST_ACTIVE(Vehicle vehicle, bool active)
void SET_VEHICLE_ROCKET_BOOST_PERCENTAGE(Vehicle vehicle, float percentage)
void SET_VEHICLE_ROCKET_BOOST_REFILL_TIME(Vehicle vehicle, float seconds)
void CONTROL_LANDING_GEAR(Vehicle vehicle, int state)
int GET_LANDING_GEAR_STATE(Vehicle vehicle)
void SET_VEHICLE_LIVERY(Vehicle vehicle, int livery)
int GET_VEHICLE_LIVERY(Vehicle vehicle)
bool IS_VEHICLE_STOPPED(Vehicle vehicle)
int GET_VEHICLE_NUMBER_OF_PASSENGERS(Vehicle vehicle)
int GET_VEHICLE_MAX_NUMBER_OF_PASSENGERS(Vehicle vehicle)
int GET_VEHICLE_MODEL_NUMBER_OF_SEATS(Hash modelHash)
int GET_VEHICLE_LIVERY_COUNT(Vehicle vehicle)
int GET_VEHICLE_ROOF_LIVERY_COUNT(Vehicle vehicle)
bool IS_VEHICLE_MODEL(Vehicle vehicle, Hash model)
bool IS_VEHICLE_STUCK_ON_ROOF(Vehicle vehicle)
void SET_VEHICLE_DOORS_LOCKED_FOR_PLAYER(Vehicle vehicle, Player player, bool toggle)
bool GET_VEHICLE_DOORS_LOCKED_FOR_PLAYER(Vehicle vehicle, Player player)
void SET_VEHICLE_DOORS_LOCKED_FOR_ALL_PLAYERS(Vehicle vehicle, bool toggle)
void SET_VEHICLE_DOORS_LOCKED_FOR_NON_SCRIPT_PLAYERS(Vehicle vehicle, bool toggle)
void SET_VEHICLE_DOORS_LOCKED_FOR_TEAM(Vehicle vehicle, int team, bool toggle)
void EXPLODE_VEHICLE(Vehicle vehicle, bool isAudible, bool isInvisible, bool p3)
void SET_VEHICLE_OUT_OF_CONTROL(Vehicle vehicle, bool killDriver, bool explodeOnImpact)
void SET_VEHICLE_TIMED_EXPLOSION(Vehicle vehicle, Ped ped, bool toggle)
void ADD_VEHICLE_PHONE_EXPLOSIVE_DEVICE(Vehicle vehicle)
bool HAS_VEHICLE_PHONE_EXPLOSIVE_DEVICE()
void DETONATE_VEHICLE_PHONE_EXPLOSIVE_DEVICE()
void SET_TAXI_LIGHTS(Vehicle vehicle, bool state)
bool IS_TAXI_LIGHT_ON(Vehicle vehicle)
void SET_VEHICLE_COLOURS(Vehicle vehicle, int colorPrimary, int colorSecondary)
void SET_VEHICLE_EXTRA_COLOURS(Vehicle vehicle, int pearlescentColor, int wheelColor)
void SET_VEHICLE_FULLBEAM(Vehicle vehicle, bool toggle)
void SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(Vehicle vehicle, int r, int g, int b)
void CLEAR_VEHICLE_CUSTOM_PRIMARY_COLOUR(Vehicle vehicle)
bool GET_IS_VEHICLE_PRIMARY_COLOUR_CUSTOM(Vehicle vehicle)
void SET_VEHICLE_CUSTOM_SECONDARY_COLOUR(Vehicle vehicle, int r, int g, int b)
void CLEAR_VEHICLE_CUSTOM_SECONDARY_COLOUR(Vehicle vehicle)
bool GET_IS_VEHICLE_SECONDARY_COLOUR_CUSTOM(Vehicle vehicle)
string GET_LIVERY_NAME(Vehicle vehicle, int liveryIndex)
void SET_VEHICLE_WINDOW_TINT(Vehicle vehicle, int tint)
int GET_VEHICLE_WINDOW_TINT(Vehicle vehicle)
void MODIFY_VEHICLE_TOP_SPEED(Vehicle vehicle, float value)
void SET_HELI_BLADES_FULL_SPEED(Vehicle vehicle)
void SET_HELI_BLADES_SPEED(Vehicle vehicle, float speed)
void SET_VEHICLE_PARACHUTE_ACTIVE(Vehicle vehicle, bool active)
bool DOES_VEHICLE_HAVE_PARACHUTE(Vehicle vehicle)
bool CAN_VEHICLE_PARACHUTE_BE_ACTIVATED(Vehicle vehicle)
void SET_VEHICLE_CAN_BE_LOCKED_ON(Vehicle vehicle, bool canBeLockedOn, bool unk)
void SET_VEHICLE_HAS_BEEN_OWNED_BY_PLAYER(Vehicle vehicle, bool owned)
void SET_VEHICLE_STEER_BIAS(Vehicle vehicle, float value)
void SET_VEHICLE_REDUCE_GRIP(Vehicle vehicle, bool toggle)
float GET_VEHICLE_ESTIMATED_MAX_SPEED(Vehicle vehicle)
void SET_VEHICLE_TYRE_FIXED(Vehicle vehicle, int tyreIndex)
int GET_VEHICLE_CLASS(Vehicle vehicle)
void ATTACH_VEHICLE_TO_CARGOBOB(Vehicle vehicle, Vehicle cargobob, int p2, float x, float y, float z)
void SET_CARGOBOB_PICKUP_MAGNET_ACTIVE(Vehicle cargobob, bool isActive)
void SET_CARGOBOB_PICKUP_MAGNET_STRENGTH(Vehicle cargobob, float strength)
void DETACH_VEHICLE_FROM_CARGOBOB(Vehicle vehicle, Vehicle cargobob)
void SET_VEHICLE_XENON_LIGHTS_COLOR(Vehicle vehicle, int colorIndex)
void SET_VEHICLE_NEON_LIGHTS_COLOR(Vehicle vehicle, int r, int g, int b)
int GET_VEHICLE_NUMBER_PLATE_TEXT_INDEX(Vehicle vehicle)
STRING GET_VEHICLE_NUMBER_PLATE_TEXT(Vehicle vehicle)
void SET_VEHICLE_SIREN(Vehicle vehicle, bool toggle)
bool IS_VEHICLE_SIREN_ON(Vehicle vehicle)
bool IS_VEHICLE_SIREN_AUDIO_ON(Vehicle vehicle)
void SET_VEHICLE_STRONG(Vehicle vehicle, bool toggle)
void REMOVE_VEHICLE_WINDOW(Vehicle vehicle, int windowIndex)
void SET_VEHICLE_LIGHT_MULTIPLIER(Vehicle vehicle, float multiplier)
void DELETE_ALL_TRAINS()
Vehicle GET_RANDOM_VEHICLE_IN_SPHERE(float x, float y, float z, float radius, Hash modelHash, int flags)
void SET_VEHICLE_DAMAGE(Vehicle vehicle, float xOffset, float yOffset, float zOffset, float damage, float radius, bool focusOnModel)
float GET_VEHICLE_ENGINE_HEALTH(Vehicle vehicle)
void SET_VEHICLE_ENGINE_HEALTH(Vehicle vehicle, float health)
bool IS_VEHICLE_DRIVEABLE(Vehicle vehicle, bool isOnFireCheck)
void START_VEHICLE_HORN(Vehicle vehicle, int duration, Hash mode, bool forever)

WEAPON -
void GIVE_DELAYED_WEAPON_TO_PED(Ped ped, Hash weaponHash, int ammoCount, bool bForceInHand)
int GET_WEAPON_TINT_COUNT(Hash weaponHash)
int GET_PED_WEAPON_TINT_INDEX(Ped ped, Hash weaponHash)
void SET_PED_WEAPON_TINT_INDEX(Ped ped, Hash weaponHash, int tintIndex)
void GIVE_WEAPON_COMPONENT_TO_PED(Ped ped, Hash weaponHash, Hash componentHash)
void REMOVE_WEAPON_COMPONENT_FROM_PED(Ped ped, Hash weaponHash, Hash componentHash)
void REMOVE_ALL_PED_WEAPONS(Ped ped, bool p1)
void REMOVE_WEAPON_FROM_PED(Ped ped, Hash weaponHash)
void SET_PED_AMMO(Ped ped, Hash weaponHash, int ammo)
bool HAS_PED_GOT_WEAPON_COMPONENT(Ped ped, Hash weaponHash, Hash componentHash)
Hash GET_PED_AMMO_TYPE_FROM_WEAPON(Ped ped, Hash weaponHash)
void SET_PED_AMMO_BY_TYPE(Ped ped, Hash ammoTypeHash, int ammo)
bool HAS_PED_GOT_WEAPON(Ped ped, Hash weaponHash)
int GET_MAX_AMMO(Ped ped, Hash weaponHash)
int GET_AMMO_IN_PED_WEAPON(Ped ped, Hash weaponhash)
bool IS_PED_WEAPON_READY_TO_SHOOT(Ped ped)
bool IS_PED_ARMED(Ped ped, int typeFlags)
bool IS_WEAPON_VALID(Hash weaponHash)

SCRIPT -
int START_NEW_SCRIPT(string scriptName, int stackSize)
Player GET_HOST_OF_THIS_SCRIPT()
float GET_GLOBAL_F(int global)
int GET_GLOBAL_I(int global)
void SET_GLOBAL_F(int global, float value)
void SET_GLOBAL_I(int global, int value)
float GET_LOCAL_F(Hash script, int local)
int GET_LOCAL_I(Hash script, int local)
void SET_LOCAL_F(Hash script, int local, float value)
void SET_LOCAL_I(Hash script, int local, int value)

PED -
int GET_GROUP_SIZE(int group)
Hash GET_CURRENT_PED_WEAPON(Ped ped)
vec3 GET_PED_LAST_WEAPON_IMPACT(Ped ped)
bool IS_PED_IN_ANY_VEHICLE(Ped ped)
void SET_GROUP_FORMATION(int groupId, int formationType)
void SET_PED_AS_GROUP_MEMBER(Ped ped, int groupId)
int GET_PED_GROUP_INDEX(Ped ped)
int GET_PED_HEALTH(Ped ped)
void SET_PED_HEALTH(Ped ped, int health)
bool IS_PED_RAGDOLL(Ped ped)
bool IS_PED_A_PLAYER(Ped ped)
void SET_PED_INTO_VEHICLE(Ped ped, Vehicle vehicle, int seatIndex)
int GET_PED_DRAWABLE_VARIATION(Ped ped, int componentId)
int GET_PED_TEXTURE_VARIATION(Ped ped, int componentId)
int GET_PED_PROP_INDEX(Ped ped, int componentId)
int GET_PED_PROP_TEXTURE_INDEX(Ped ped, int componentId)
void SET_PED_COMPONENT_VARIATION(Ped ped, int componentId, int drawableId, int textureId, int paletteId)
void SET_PED_PROP_INDEX(Ped ped, int componentId, int drawableId, int TextureId, bool attach)
void SET_PED_CAN_SWITCH_WEAPON(Ped ped, bool toggle)
bool IS_PED_SHOOTING(Ped ped)
int GET_PED_BONE_INDEX(Ped ped, int boneId)
vec3 GET_PED_BONE_COORDS(Ped ped, int boneId, float offsetX, float offsetY, float offsetZ)
Hash GET_PED_RELATIONSHIP_GROUP_HASH(Ped ped)
void SET_PED_RELATIONSHIP_GROUP_HASH(Ped ped, Hash hash)
Vehicle GET_VEHICLE_PED_IS_USING(Ped ped)
void CLEAR_ALL_PED_PROPS(Ped ped)
void CLEAR_PED_TASKS_IMMEDIATELY(Ped ped)
void CLEAR_PED_BLOOD_DAMAGE(Ped ped)
bool IS_PED_IN_VEHICLE(Ped ped, Vehicle vehicle, bool atGetIn)
bool IS_PED_USING_ANY_SCENARIO(Ped ped)
bool SET_PED_TO_RAGDOLL(Ped ped, int time1, int time2, int ragdollType)
void SET_PED_CAN_RAGDOLL_FROM_PLAYER_IMPACT(Ped ped, bool toggle)
bool CAN_PED_RAGDOLL(Ped ped)
void SET_PED_COMBAT_ABILITY(Ped ped, int abilityLevel)
void SET_PED_MAX_HEALTH(Ped ped, int value)
int GET_PED_MAX_HEALTH(Ped ped)
void RESURRECT_PED(Ped ped)
void SET_PED_COMBAT_MOVEMENT(Ped ped, int combatMovement)
void SET_PED_COMBAT_RANGE(Ped ped, int combatRange)
void SET_PED_COMBAT_ATTRIBUTES(Ped ped, int attributeId, bool enabled)
void SET_PED_ACCURACY(Ped ped, int accuracy)
Ped CREATE_PED(int pedType, Hash modelHash, float x, float y, float z, float heading, bool isNetwork, bool bScriptHostPed)
int GET_NUMBER_OF_PED_DRAWABLE_VARIATIONS(Ped ped, int componentId)
int GET_NUMBER_OF_PED_TEXTURE_VARIATIONS(Ped ped, int componentId, int drawableId)
int GET_NUMBER_OF_PED_PROP_DRAWABLE_VARIATIONS(Ped ped, int propId)
int GET_NUMBER_OF_PED_PROP_TEXTURE_VARIATIONS(Ped ped, int propId, int drawableId)
void SET_PED_RANDOM_COMPONENT_VARIATION(Ped ped, int p1)
void SET_PED_DEFAULT_COMPONENT_VARIATION(Ped ped)
void SET_PED_MOVEMENT_CLIPSET(Ped ped, string clipSet, float transitionSpeed)
void RESET_PED_MOVEMENT_CLIPSET(Ped ped, float p1)
Ped CLONE_PED(Ped ped)
void SET_PED_CONFIG_FLAG(Ped ped, int flagId, bool value)
void SET_PED_DENSITY_MULTIPLIER_THIS_FRAME(float multiplier)
void SET_SCENARIO_PED_DENSITY_MULTIPLIER_THIS_FRAME(float p0, float p1)
int CREATE_GROUP(int unused)
void REMOVE_GROUP(int groupId)
void SET_PED_AS_GROUP_LEADER(Ped ped, int groupId)
void REMOVE_PED_FROM_GROUP(Ped ped)
bool IS_PED_GROUP_MEMBER(Ped ped, int groupId)
void SET_GROUP_FORMATION_SPACING(int groupId, float p1, float p2, float p3)
void RESET_GROUP_FORMATION_DEFAULT_SPACING(int groupHandle)
void SET_PED_NEVER_LEAVES_GROUP(Ped ped, bool toggle)
bool DOES_GROUP_EXIST(int groupId)
bool IS_PED_IN_GROUP(Ped ped)
void SET_CREATE_RANDOM_COPS(bool toggle)
bool CAN_CREATE_RANDOM_COPS()
bool IS_PED_SWIMMING(Ped ped)
bool IS_PED_SWIMMING_UNDERWATER(Ped ped)
void CLEAR_RELATIONSHIP_BETWEEN_GROUPS(Hash group1, Hash group2)
void SET_RELATIONSHIP_BETWEEN_GROUPS(int relationship, Hash group1, Hash group2)
void SET_PED_HEAD_BLEND_DATA(Ped ped, int shapeFirstID, int shapeSecondID, int shapeThirdID, int skinFirstID, int skinSecondID, int skinThirdID, float shapeMix, float skinMix, float thirdMix, bool isParent)
void SET_PED_FACE_FEATURE(Ped ped, int index, float scale)
int GET_PED_EYE_COLOR(Ped ped)
void SET_PED_EYE_COLOR(Ped ped, int index)
void SET_PED_HEAD_OVERLAY(Ped ped, int overlayID, int index, float opacity)
int GET_PED_HEAD_OVERLAY_VALUE(Ped ped, int overlayID)
void SET_PED_HEAD_OVERLAY_COLOR(Ped ped, int overlayID, int colorType, int colorID, int secondColorID)
int GET_PED_ARMOR(Ped ped)
void SET_PED_ARMOR(Ped ped, int amount)
void SET_PED_FLEE_ATTRIBUTES(Ped ped, int attributeFlags, bool enable)
void SET_PED_AS_ENEMY(Ped ped, bool toggle)
Vehicle GET_VEHICLE_PED_IS_IN(Ped ped, bool includeLastVehicle)
bool IS_PED_MODEL(Ped ped, Hash modelHash)
Ped CREATE_RANDOM_PED(float posX, float posY, float posZ)
bool IS_PED_ON_VEHICLE(Ped ped)
bool IS_PED_IN_COMBAT(Ped ped, Ped target)
Entity GET_PED_SOURCE_OF_DEATH(Ped ped)
void SET_PED_FIRING_PATTERN(Ped ped, Hash patternHash)
void SET_PED_SHOOT_RATE(Ped ped, int shootRate)
void APPLY_DAMAGE_TO_PED(Ped ped, int damageAmount, bool p2, Any p3)
int GET_PED_TYPE(Ped ped)
void SET_PED_HAIR_COLOR(Ped ped, int colorID, int highlightColorID)

MISC -
bool FILE_EXISTS(string path)
bool DIR_EXISTS(string path)
void MAKE_DIR(string path)
string GET_APPDATA_PATH(string dir, string file)
string FROM_CLIPBOARD()
void TO_CLIPBOARD(string str)
int TIME()
int TIME_MS()

GAMEPLAY -
void TERMINATE_ALL_SCRIPTS_WITH_THIS_NAME(string scriptName)
void SET_FAKE_WANTED_LEVEL(int fakeWantedLevel)
bool IS_BIT_SET(int address, int offset)
void CANCEL_STUNT_JUMP()
bool IS_STUNT_JUMP_IN_PROGRESS()
void SET_STUNT_JUMPS_CAN_TRIGGER(bool toggle)
void SET_GRAVITY_LEVEL(int level)
void SET_PLAYER_IS_IN_ANIMAL_FORM(bool toggle)
bool GET_IS_PLAYER_IN_ANIMAL_FORM()
void SET_BIT(int address, int offset)
void CLEAR_BIT(int address, int offset)
bool IS_DLC_PRESENT(Hash dlcHash)
void SET_BLACKOUT(bool toggle)
int GET_GAME_STATE()
bool IS_GAME_STATE(int state)
float GET_GROUND_Z(float x, float y)
bool IS_ONSCREEN_KEYBOARD_ACTIVE()
Hash GET_HASH_KEY(string string)
void DISPLAY_ONSCREEN_KEYBOARD(string windowTitle, string defaultText, int maxInputLength)
int UPDATE_ONSCREEN_KEYBOARD()
string GET_ONSCREEN_KEYBOARD_RESULT()
void SET_OVERRIDE_WEATHER(string weatherType)
void CLEAR_OVERRIDE_WEATHER()
void SET_MOBILE_RADIO(bool toggle)
void CLEAR_AREA_OF_VEHICLES(float x, float y, float z, float radius, bool p4, bool p5, bool p6, bool p7, bool p8, bool p9)
void CLEAR_AREA_OF_OBJECTS(float x, float y, float z, float radius, int flags)
void CLEAR_AREA_OF_PEDS(float x, float y, float z, float radius, int flags)
void CLEAR_AREA_OF_COPS(float x, float y, float z, float radius, int flags)
void CLEAR_AREA_OF_PROJECTILES(float x, float y, float z, float radius, int flags)
void _SET_CLOUD_HAT_OPACITY(float opacity)
float _GET_CLOUD_HAT_OPACITY()
void PRELOAD_CLOUD_HAT(string name)
void _CLEAR_CLOUD_HAT()
void LOAD_CLOUD_HAT(string name, float transitionTime)
void UNLOAD_CLOUD_HAT(string name, float p1)
float GET_FRAME_TIME()
int GET_FRAME_COUNT()
void SHOOT_SINGLE_BULLET_BETWEEN_COORDS(float x1, float y1, float z1, float x2, float y2, float z2, int damage, bool p7, Hash weaponHash, Ped ownerPed, bool isAudible, bool isInvisible, float speed)

UI -
int GET_WAYPOINT_BLIP_ENUM_ID()
Blip GET_FIRST_BLIP_INFO_ID(int blipSprite)
bool DOES_BLIP_EXIST(Blip blip)
Blip GET_NEXT_BLIP_INFO_ID(int blipSprite)
int GET_BLIP_INFO_ID_TYPE(Blip blip)
vec3 GET_BLIP_INFO_ID_COORD(Blip blip)
void BEGIN_TEXT_COMMAND_DISPLAY_TEXT(string text)
void ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(string text)
void END_TEXT_COMMAND_DISPLAY_TEXT(float x, float y, int p2)
void DRAW_TEXT(string text, float x, float y, float width, float height, int red, int green, int blue, int alpha, int font, bool centered, bool rightAligned, bool outline)
Blip GET_BLIP_FROM_ENTITY(Entity entity)
Blip ADD_BLIP_FOR_ENTITY(Entity entity)
void SET_BLIP_SPRITE(Blip blip, int spriteId)
void SET_BLIP_COLOUR(Blip blip, int color)
void HIDE_HUD_COMPONENT_THIS_FRAME(int id)
void HIDE_HUD_AND_RADAR_THIS_FRAME()
string GET_LABEL_TEXT(string labelName)
void DRAW_RECT(float x, float y, float width, float height, int r, int g, int b, int a, bool p8)
void DRAW_LINE(float x1, float y1, float z1, float x2, float y2, float z2, int red, int green, int blue, int alpha)
void SET_TEXT_SCALE(float scale, float size)
void SET_TEXT_COLOUR(int red, int green, int blue, int alpha)
void SET_TEXT_FONT(int fontType)
void SET_TEXT_WRAP(float start, float end)
void SET_TEXT_OUTLINE()
void SET_TEXT_CENTRE(bool align)
void SET_TEXT_RIGHT_JUSTIFY(bool toggle)
void SET_TEXT_JUSTIFICATION(int justifyType)
void SET_NEW_WAYPOINT(float x, float y)
bool IS_HUD_COMPONENT_ACTIVE(int id)
void SHOW_HUD_COMPONENT_THIS_FRAME(int id)
void SET_WAYPOINT_OFF()
void SET_BLIP_AS_MISSION_CREATOR_BLIP(Blip blip, bool toggle)
bool IS_MISSION_CREATOR_BLIP(Blip blip)
Blip ADD_BLIP_FOR_RADIUS(float posX, float posY, float posZ, float radius)
Blip ADD_BLIP_FOR_PICKUP(Pickup pickup)
Blip ADD_BLIP_FOR_COORD(float x, float y, float z)
void SET_BLIP_COORD(Blip blip, float posX, float posY, float posZ)
vec3 GET_BLIP_COORDS(Blip blip)
void REMOVE_BLIP(Blip blip)
void SET_BLIP_ROUTE(Blip blip, bool enabled)
void SET_BLIP_ROUTE_COLOUR(Blip blip, int colour)
int GET_WAYPOINT_BLIP_ENUM_ID()
Blip GET_FIRST_BLIP_INFO_ID(int blipSprite)
BOOL DOES_BLIP_EXIST(Blip blip)
Blip GET_NEXT_BLIP_INFO_ID(int blipSprite)
int GET_BLIP_INFO_ID_TYPE(Blip blip)
vec3 GET_BLIP_INFO_ID_COORD(Blip blip)

GRAPHICS -
void REQUEST_NAMED_PTFX_ASSET(string fxName)
bool HAS_NAMED_PTFX_ASSET_LOADED(string fxName)
void REMOVE_NAMED_PTFX_ASSET(string fxName)
void USE_PARTICLE_FX_ASSET(string name)
int START_PARTICLE_FX_LOOPED_ON_ENTITY(string effectName, Entity entity, float xOffset, float yOffset, float zOffset, float xRot, float yRot, float zRot, float scale, bool xAxis, bool yAxis, bool zAxis)
bool START_PARTICLE_FX_NON_LOOPED_ON_ENTITY(string effectName, Entity entity, float offsetX, float offsetY, float offsetZ, float rotX, float rotY, float rotZ, float scale, bool axisX, bool axisY, bool axisZ)
int START_NETWORKED_PARTICLE_FX_LOOPED_ON_ENTITY(string effectName, Entity entity, float xOffset, float yOffset, float zOffset, float xRot, float yRot, float zRot, float scale, bool xAxis, bool yAxis, bool zAxis, Any p12, Any p13, Any p14, Any p15)
bool START_NETWORKED_PARTICLE_FX_NON_LOOPED_ON_ENTITY(string effectName, Entity entity, float offsetX, float offsetY, float offsetZ, float rotX, float rotY, float rotZ, float scale, bool axisX, bool axisY, bool axisZ)
int START_PARTICLE_FX_LOOPED_AT_COORD(string effectName, float x, float y, float z, float xRot, float yRot, float zRot, float scale, bool xAxis, bool yAxis, bool zAxis, bool p11)
int START_PARTICLE_FX_NON_LOOPED_AT_COORD(string effectName, float xPos, float yPos, float zPos, float xRot, float yRot, float zRot, float scale, bool xAxis, bool yAxis, bool zAxis)
bool START_NETWORKED_PARTICLE_FX_NON_LOOPED_AT_COORD(string effectName, float xPos, float yPos, float zPos, float xRot, float yRot, float zRot, float scale, bool xAxis, bool yAxis, bool zAxis, bool p11)
void REMOVE_PARTICLE_FX(int ptfxHandle, bool p1)
void REMOVE_PARTICLE_FX_IN_RANGE(float X, float Y, float Z, float radius)
void SET_PARTICLE_FX_LOOPED_OFFSETS(int ptfxHandle, float x, float y, float z, float rotX, float rotY, float rotZ)
void SET_PARTICLE_FX_LOOPED_EVOLUTION(int ptfxHandle, string propertyName, float amount, bool noNetwork)
void SET_PARTICLE_FX_LOOPED_COLOUR(int ptfxHandle, float r, float g, float b, bool p4)
void SET_PARTICLE_FX_LOOPED_ALPHA(int ptfxHandle, float alpha)
void SET_PARTICLE_FX_LOOPED_SCALE(int ptfxHandle, float scale)
void SET_PARTICLE_FX_LOOPED_FAR_CLIP_DIST(int ptfxHandle, float range)
void ENABLE_CLOWN_BLOOD_VFX(bool toggle)
void ENABLE_ALIEN_BLOOD_VFX(bool toggle)
void ANIMPOSTFX_PLAY(string effectName, int duration, bool looped)
void ANIMPOSTFX_STOP(string effectName)
bool ANIMPOSTFX_IS_RUNNING(string effectName)
void ANIMPOSTFX_STOP_ALL()
int REQUEST_SCALEFORM_MOVIE(string scaleformName)
bool BEGIN_SCALEFORM_MOVIE_METHOD(int scaleform, string methodName)
void SCALEFORM_MOVIE_METHOD_ADD_PARAM_TEXTURE_NAME_STRING(string string)
void SCALEFORM_MOVIE_METHOD_ADD_PARAM_INT(int value)
void SCALEFORM_MOVIE_METHOD_ADD_PARAM_FLOAT(float value)
void SCALEFORM_MOVIE_METHOD_ADD_PARAM_BOOL(bool value)
void DRAW_SCALEFORM_MOVIE_FULLSCREEN(int scaleform, int red, int green, int blue, int alpha, int unk)
void DRAW_SCALEFORM_MOVIE(int scaleformHandle, float x, float y, float width, float height, int red, int green, int blue, int alpha, int unk)
void END_SCALEFORM_MOVIE_METHOD()
void DRAW_MARKER(int type, float posX, float posY, float posZ, float dirX, float dirY, float dirZ, float rotX, float rotY, float rotZ, float scaleX, float scaleY, float scaleZ, int red, int green, int blue, int alpha, bool bobUpAndDown, bool faceCamera, int p19, bool rotate, string textureDict, string textureName, bool drawOnEnts)
int CREATE_CHECKPOINT(int type, float posX1, float posY1, float posZ1, float posX2, float posY2, float posZ2, float diameter, int red, int green, int blue, int alpha, int reserved)
void SET_CHECKPOINT_ICON_HEIGHT(int checkpoint, float scale)
void SET_CHECKPOINT_CYLINDER_HEIGHT(int checkpoint, float nearHeight, float farHeight, float radius)
void SET_CHECKPOINT_RGBA(int checkpoint, int red, int green, int blue, int alpha)
void DELETE_CHECKPOINT(int checkpoint)
bool HAS_SCALEFORM_MOVIE_LOADED(int scaleformHandle)
void SET_SCALEFORM_MOVIE_AS_NO_LONGER_NEEDED(int scaleform)

MOBILE -
void CREATE_MOBILE_PHONE(int phoneType)
void DESTROY_MOBILE_PHONE()
void SET_MOBILE_PHONE_SCALE(float scale)
void SET_MOBILE_PHONE_POSITION(float posX, float posY, float posZ)
vec3 GET_MOBILE_PHONE_POSITION()
